// <auto-generated />
using System;
using Library.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240116002908_Postgres")]
    partial class Postgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Library.DataAccess.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Джоан",
                            LastName = "Роулинг"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Анджей",
                            LastName = "Сапковский"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Стивен",
                            LastName = "Кинг"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Маргарет",
                            LastName = "Митчелл"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Дэн",
                            LastName = "Браун"
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Borrowed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "Третья книга из серии о приключениях юного волшебника Гарри Поттера, который узнает что их тюрьмы сбежал опасный преступник Сириус Блэк, якобы замышляющий убить Гарри",
                            GenreId = 1,
                            Isbn = "978-5-389-17021-6",
                            Title = "Гарри Поттер и узник Азкабана"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Description = "Первая книга из цикла «Ведьмак» о приключениях профессионального охотника за чудовищами Геральта из Ривии, который путешествует по миру, полному магии и опасностей, и выполняет различные заказы",
                            GenreId = 1,
                            Isbn = "978-5-17-120969-2",
                            Title = "Последнее желание"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Description = "Роман, действие которого происходит в тюремном блоке смертников, где надзиратель Пол Эджкомб сталкивается с необычным заключенным Джоном Коффи, обладающим сверхъестественными способностями",
                            GenreId = 2,
                            Isbn = "978-5-17-085348-9",
                            Title = "Зеленая миля"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Description = "Эпическая история любви и ненависти, страсти и гордости, жизни и смерти на фоне Гражданской войны в США, в центре которой находится красавица и своенравная Скарлетт О’Хара и ее отношения с харизматичным Реттом Батлером",
                            GenreId = 3,
                            Isbn = "978-5-389-17583-9",
                            Title = "Унесенные ветром"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Description = "Знаменитый роман о тайне, которая скрывается в произведениях Леонардо да Винчи, и о загадочном ордене, который охраняет ее. Главные герои - профессор символогии Роберт Лэнгдон и криптограф Софи Невё - пытаются разгадать код, который может изменить мировую историю",
                            GenreId = 2,
                            Isbn = "978-5-17-121367-5",
                            Title = "Код да Винчи"
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Фэнтези — это фантастический жанр, который использует мифологические и фольклорные, а также сказочные мотивы в повествовании. В фэнтези часто создаются вымышленные миры, населенные необычными существами и героями, обладающими магическими способностями. Фэнтези может быть основано на разных мифологиях и культурах, а также иметь разные поджанры, такие как эпическое фэнтези, героическое фэнтези, городское фэнтези и т.д.",
                            Name = "Фэнтези"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Детектив — это жанр литературы, в котором главным элементом является расследование преступления, загадки или тайны. В детективе обычно присутствуют следующие персонажи: детектив, который пытается разгадать преступление, подозреваемый, который может быть виновным или невиновным, жертва, которая пострадала от преступления, и свидетели, которые могут дать полезную информацию. Детектив может иметь разные поджанры, такие как классический детектив, иронический детектив, полицейский детектив и т.д.",
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Исторический роман — это жанр литературы, в котором действие происходит в определенный исторический период или эпоху. В историческом романе автор стремится воссоздать атмосферу и детали того времени, а также показать взаимодействие вымышленных и реальных исторических персонажей. Исторический роман может быть основан на реальных событиях или выдуманных, а также иметь разные поджанры, такие как приключенческий исторический роман, военный исторический роман, романтический исторический роман и т.д.",
                            Name = "Исторический роман"
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Library.DataAccess.Models.Book", b =>
                {
                    b.HasOne("Library.DataAccess.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.DataAccess.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Library.DataAccess.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.DataAccess.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
